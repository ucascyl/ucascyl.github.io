import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,d as t}from"./app-EDFqs7W4.js";const p={},e=t(`<h2 id="_1-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-数据类型"><span>1. 数据类型</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>一、byte，占用一个字节，取值范围为 -128-127，默认是“\\u0000”，表示空

二、short，占用两个字节，取值范围为 -32768-32767

三、int，占用四个字节，-2147483648-2147483647

四、long，占用八个字节，对 long 型变量赋值时必须加上&quot;L&quot;或“l”,否则不认为是 long 型

五、float，占用四个字节，对 float 型进行赋值的时候必须加上“F”或“f”，如果不加，会产生编译错误，因为系统自动将其定义为 double 型变量。double转换为float类型数据会损失精度。float a = 12.23产生编译错误的，float a = 12是正确的

六、double，占用八个字节，对 double 型变量赋值的时候最好加上“D”或“d”，但加不加不是硬性规定

七、char,占用两个字节，在定义字符型变量时，要用单引号括起来

八、boolean，只有两个值“true”和“false”，默认值为false，不能用0或非0来代替，这点和C语言不同
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>整数类型（byte/short/int/long）中，对于未声明数据类型的整形，其默认类型为int型。在浮点类型（float/double）中，对于未声明数据类型的浮点型，默认为double型</strong></p><h2 id="_2-源码" tabindex="-1"><a class="header-anchor" href="#_2-源码"><span>2. 源码</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">private</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//在有保证的非NaN参数上使用原始的逐位转换。</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> negativeZeroFloatBits  <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToRawIntBits</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> negativeZeroDoubleBits <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToRawLongBits</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> a<span class="token punctuation">)</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>   <span class="token comment">// a is NaN</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToRawIntBits</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> negativeZeroFloatBits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Raw conversion ok since NaN can&#39;t map to -0.0.</span>
            <span class="token keyword">return</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> a<span class="token punctuation">)</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>   <span class="token comment">// a is NaN</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0.0d</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0.0d</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToRawLongBits</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> negativeZeroDoubleBits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Raw conversion ok since NaN can&#39;t map to -0.0.</span>
            <span class="token keyword">return</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> a<span class="token punctuation">)</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>   <span class="token comment">// a is NaN</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToRawIntBits</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> negativeZeroFloatBits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Raw conversion ok since NaN can&#39;t map to -0.0.</span>
            <span class="token keyword">return</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> a<span class="token punctuation">)</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>   <span class="token comment">// a is NaN</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0.0d</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0.0d</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToRawLongBits</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> negativeZeroDoubleBits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Raw conversion ok since NaN can&#39;t map to -0.0.</span>
            <span class="token keyword">return</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>	
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-解读" tabindex="-1"><a class="header-anchor" href="#_3-解读"><span>3. 解读</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> negativeZeroFloatBits  <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToRawIntBits</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><ul><li>将其初始化为表示浮点数 <code>-0.0f</code> 的原始位表示形式。在 Java 中，浮点数的位表示可以通过 <code>Float.floatToRawIntBits()</code> 方法来获取</li><li><code>-0.0f</code> 表示负零，它与正零在数值上相等，但在位表示上有所不同。在 IEEE 754 浮点数标准中，负零的符号位为 1，其余位都为 0。这种位模式可以通过 <code>Float.floatToRawIntBits()</code> 转换为整数形式，并存储在 <code>negativeZeroFloatBits</code> 中</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> a<span class="token punctuation">)</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>   <span class="token comment">// a is NaN</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToRawIntBits</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> negativeZeroFloatBits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Raw conversion ok since NaN can&#39;t map to -0.0.</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li><code>if (a != a) return a;</code>: 这一行检查 <code>a</code> 是否为 <code>NaN</code>（非数字）。在 <code>Java</code> 中，<code>NaN</code> 与任何值都不相等，包括它自己。因此，如果 <code>a</code> 是 <code>NaN</code>，则条件为真，代码将返回 <code>a</code> 本身</li><li><code>if ((a == 0.0f) &amp;&amp; (b == 0.0f) &amp;&amp; (Float.floatToRawIntBits(a) == negativeZeroFloatBits)) return b;</code>: 这一行检查如果 <code>a</code> 和 <code>b</code> 都为零，并且 <code>a</code> 是负零，那么返回 <code>b</code>。负零和正零在二进制表示中是不同的，但在数学上它们相等。这个检查确保在这种情况下，返回的是正零而不是负零</li></ul></blockquote>`,10),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","Math-Max_Min.html.vue"]]),d=JSON.parse('{"path":"/guide/Java%E6%BA%90%E7%A0%81/Math-Max_Min.html","title":"Math-Max&Min","lang":"zh-CN","frontmatter":{"order":1,"title":"Math-Max&Min","description":"1. 数据类型 整数类型（byte/short/int/long）中，对于未声明数据类型的整形，其默认类型为int型。在浮点类型（float/double）中，对于未声明数据类型的浮点型，默认为double型 2. 源码 3. 解读 将其初始化为表示浮点数 -0.0f 的原始位表示形式。在 Java 中，浮点数的位表示可以通过 Float.floatT...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/Java%E6%BA%90%E7%A0%81/Math-Max_Min.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"Math-Max&Min"}],["meta",{"property":"og:description","content":"1. 数据类型 整数类型（byte/short/int/long）中，对于未声明数据类型的整形，其默认类型为int型。在浮点类型（float/double）中，对于未声明数据类型的浮点型，默认为double型 2. 源码 3. 解读 将其初始化为表示浮点数 -0.0f 的原始位表示形式。在 Java 中，浮点数的位表示可以通过 Float.floatT..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"cylin"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Math-Max&Min\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"cylin\\",\\"url\\":\\"https://docs.cylin.cn\\"}]}"]]},"headers":[{"level":2,"title":"1. 数据类型","slug":"_1-数据类型","link":"#_1-数据类型","children":[]},{"level":2,"title":"2. 源码","slug":"_2-源码","link":"#_2-源码","children":[]},{"level":2,"title":"3. 解读","slug":"_3-解读","link":"#_3-解读","children":[]}],"git":{},"readingTime":{"minutes":2.94,"words":883},"filePathRelative":"guide/Java源码/Math-Max&Min.md","autoDesc":true}');export{k as comp,d as data};
