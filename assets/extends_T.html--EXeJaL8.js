import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as e}from"./app-EDFqs7W4.js";const t={},p=e(`<h2 id="_1-区别" tabindex="-1"><a class="header-anchor" href="#_1-区别"><span>1. 区别</span></a></h2><ul><li><strong>? extends T</strong>：表示某个未知类型，该类型是 T 类型的子类（包括 T 自身）。换句话说，<code>? extends T</code> 表示的是一个泛型的上界，用于限定泛型类型的上限</li><li><strong>? super T</strong>：表示某个未知类型，该类型是 T 类型的父类（包括 T 自身）。换句话说，<code>? super T</code> 表示的是一个泛型的下界，用于限定泛型类型的下限</li></ul><h2 id="_2-extends-t-不能往里存-只能往外取" tabindex="-1"><a class="header-anchor" href="#_2-extends-t-不能往里存-只能往外取"><span>2. extends T 不能往里存，只能往外取</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//error</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">LeiFeng</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>list.add(new Son());这行会报错：</p><p><code>&#39;java.util.List&#39; 中的 &#39;add(capture&lt;? extends cn.cestc.Father&gt;)&#39; 无法应用于 &#39;(cn.cestc.Son)&#39;</code></p></blockquote><p><code>List&lt;? extends Father&gt;</code> 表示 “具有任何从Son继承类型的列表”，编译器无法确定List所持有的类型，所以无法安全的向其中添加对象</p><p>或许想尝试这么做：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Son</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>即使你指明了为Son类型，也不能用add方法添加一个Son对象。</p><h3 id="_2-1-list中为什么不能加入father类和father类的子类呢" tabindex="-1"><a class="header-anchor" href="#_2-1-list中为什么不能加入father类和father类的子类呢"><span>2.1 list中为什么不能加入Father类和Father类的子类呢？？</span></a></h3><p><code>List&lt;? extends Father&gt;</code>表示上限是Father,下面这样的赋值都是合法的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Father</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Son</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&gt;</span></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LeiFeng</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>List&lt;? extends Father&gt;</code>支持add方法的话：</p><ul><li>list1可以add Father和所有Father的子类</li><li>list2可以add Son和所有Son的子类</li><li>list3可以add LeiFeng和所有LeiFeng的子类</li></ul><p>下面代码是编译<strong>不通过</strong>的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//error</span>
list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>原因是编译器只知道容器内是Father或者它的派生类，但具体是什么类型不知道</p><p>可能是Father？可能是Son？也可能是LeiFeng</p><blockquote><p>编译器在看到后面用Father赋值以后，集合里并没有限定参数类型是“Father“。而是标上一个占位符：CAP#1，来表示捕获一个Father或Father的子类，具体是什么类不知道，代号CAP#1。然后无论是想往里插入Son或者LeiFeng或者Father编译器都不知道能不能和这个CAP#1匹配，所以就都不允许</p></blockquote><h3 id="_2-2-错误原因" tabindex="-1"><a class="header-anchor" href="#_2-2-错误原因"><span>2.2 错误原因</span></a></h3><p>所以通配符<code>&lt;?&gt;</code>和类型参数的区别就在于，对编译器来说所有的T都代表同一种类型。比如下面这个泛型方法里，三个T都指代同一个类型，要么都是String，要么都是Integer</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但通配符<code>&lt;?&gt;</code>没有这种约束，<code>List&lt;?&gt;</code>单纯的就表示：集合里放了一个东西，是什么我不知道</p><p>所以这里的错误就在这里，<code>List&lt;? extends Father&gt;</code>里什么都放不进去</p><h3 id="_2-3-用法" tabindex="-1"><a class="header-anchor" href="#_2-3-用法"><span>2.3 用法</span></a></h3><p>由于我们已经保证了List中保存的是Father类或者他的某一个子类，所以，可以用get方法直接获得值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Father</span> father <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//读取出来的东西只能存放在Father或它的基类里</span>
<span class="token class-name">Object</span> object <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//读取出来的东西只能存放在Father或它的基类里</span>
<span class="token class-name">Human</span> human <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//读取出来的东西只能存放在Father或它的基类里</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-总结" tabindex="-1"><a class="header-anchor" href="#_2-4-总结"><span>2.4 总结</span></a></h3><p>在 <code>List&lt;? extends Father&gt;</code> 这种情况下，你不能直接向列表中添加元素，因为编译器无法确定实际类型是什么。<code>List&lt;? extends Father&gt;</code> 表示的是一个泛型列表，该列表中的元素类型是 <code>Father</code> 类型或 <code>Father</code> 的子类，但编译器无法确定具体是哪个子类。</p><p>如果你尝试向这样的列表中添加元素，编译器会报错。这是因为，如果列表中的元素类型是 <code>Father</code> 的某个子类，而你尝试添加的对象类型可能不是这个子类，这样会破坏类型安全性</p><h2 id="_3-super-t-不影响往里存-但往外取只能放在object对象里" tabindex="-1"><a class="header-anchor" href="#_3-super-t-不影响往里存-但往外取只能放在object对象里"><span>3. &lt;? super T&gt;不影响往里存，但往外取只能放在Object对象里</span></a></h2><blockquote><p>下界用super进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至Object</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//super只能添加Father和Father的子类，不能添加Father的父类</span>
<span class="token comment">//读取出来的东西只能存放在Object类里</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Father</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//compile error </span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Father</span> person1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//compile error </span>
<span class="token class-name">Son</span> son <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//compile error </span>
<span class="token class-name">Object</span> object1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-pecs原则" tabindex="-1"><a class="header-anchor" href="#_4-pecs原则"><span>4. PECS原则</span></a></h2><p>最后看一下什么是PECS（Producer Extends Consumer Super）原则，已经很好理解了：</p><ul><li>频繁往外读取内容的，适合用上界Extends</li><li>经常往里插入的，适合用下界Super</li></ul><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h2><ul><li><code>extends </code>可用于返回类型限定，不能用于参数类型限定（换句话说：<code>? extends xxx </code>只能用于方法返回类型限定，<code>jdk</code>能够确定此类的最小继承边界为<code>xxx</code>，只要是这个类的父类都能接收，但是传入参数无法确定具体类型，只能接受<code>null</code>的传入）</li><li><code>super</code> 可用于参数类型限定，不能用于返回类型限定（换句话说：<code>? supper xxx</code> 只能用于方法传参，因为<code>jdk</code>能够确定传入为<code>xxx</code>的子类，返回只能用<code>Object</code>类接收）。</li><li><code>? </code>既不能用于方法参数传入，也不能用于方法返回</li></ul>`,38),c=[p];function o(l,i){return n(),a("div",null,c)}const d=s(t,[["render",o],["__file","extends_T.html.vue"]]),k=JSON.parse('{"path":"/guide/Java/extends_T.html","title":"extends_T和super_T的理解","lang":"zh-CN","frontmatter":{"order":1,"title":"extends_T和super_T的理解","description":"1. 区别 ? extends T：表示某个未知类型，该类型是 T 类型的子类（包括 T 自身）。换句话说，? extends T 表示的是一个泛型的上界，用于限定泛型类型的上限 ? super T：表示某个未知类型，该类型是 T 类型的父类（包括 T 自身）。换句话说，? super T 表示的是一个泛型的下界，用于限定泛型类型的下限 2. exte...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/Java/extends_T.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"extends_T和super_T的理解"}],["meta",{"property":"og:description","content":"1. 区别 ? extends T：表示某个未知类型，该类型是 T 类型的子类（包括 T 自身）。换句话说，? extends T 表示的是一个泛型的上界，用于限定泛型类型的上限 ? super T：表示某个未知类型，该类型是 T 类型的父类（包括 T 自身）。换句话说，? super T 表示的是一个泛型的下界，用于限定泛型类型的下限 2. exte..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"cylin"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"extends_T和super_T的理解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"cylin\\",\\"url\\":\\"https://docs.cylin.cn\\"}]}"]]},"headers":[{"level":2,"title":"1. 区别","slug":"_1-区别","link":"#_1-区别","children":[]},{"level":2,"title":"2. extends T 不能往里存，只能往外取","slug":"_2-extends-t-不能往里存-只能往外取","link":"#_2-extends-t-不能往里存-只能往外取","children":[{"level":3,"title":"2.1 list中为什么不能加入Father类和Father类的子类呢？？","slug":"_2-1-list中为什么不能加入father类和father类的子类呢","link":"#_2-1-list中为什么不能加入father类和father类的子类呢","children":[]},{"level":3,"title":"2.2 错误原因","slug":"_2-2-错误原因","link":"#_2-2-错误原因","children":[]},{"level":3,"title":"2.3 用法","slug":"_2-3-用法","link":"#_2-3-用法","children":[]},{"level":3,"title":"2.4 总结","slug":"_2-4-总结","link":"#_2-4-总结","children":[]}]},{"level":2,"title":"3. <? super T>不影响往里存，但往外取只能放在Object对象里","slug":"_3-super-t-不影响往里存-但往外取只能放在object对象里","link":"#_3-super-t-不影响往里存-但往外取只能放在object对象里","children":[]},{"level":2,"title":"4. PECS原则","slug":"_4-pecs原则","link":"#_4-pecs原则","children":[]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]}],"git":{},"readingTime":{"minutes":4.4,"words":1321},"filePathRelative":"guide/Java/extends_T.md","autoDesc":true}');export{d as comp,k as data};
