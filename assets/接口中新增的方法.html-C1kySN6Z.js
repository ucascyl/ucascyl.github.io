import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,d as t}from"./app-EDFqs7W4.js";const s={},i=t(`<p>Java 8 开始是可以有方法实现的，可以在接口中添加默认方法和静态方法。</p><p>默认方法用 <code>default</code> 修饰，只能用在接口中，静态方法用 <code>static</code> 修饰</p><h1 id="jdk8中接口的新增" tabindex="-1"><a class="header-anchor" href="#jdk8中接口的新增"><span>JDK8中接口的新增</span></a></h1><p>在JDK8中针对接口有做增强，在JDK8之前</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>
	静态常量<span class="token punctuation">;</span>
	抽象方法<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK8之后</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>
	静态常量<span class="token punctuation">;</span>
	抽象方法<span class="token punctuation">;</span>
    
   <span class="token comment">// 新增</span>
	默认方法<span class="token punctuation">;</span>
	静态方法<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="为什么要有接口默认方法" tabindex="-1"><a class="header-anchor" href="#为什么要有接口默认方法"><span>为什么要有接口默认方法？</span></a></h1><p>举一个很现实的例子：</p><p>我们的接口老早就写好了，后面因为各种业务问题，避免不了要修改接口。</p><p>在 Java 8 之前，比如要在一个接口中添加一个抽象方法，那所有的接口实现类都要去实现这个方法，不然就会编译错误，而某些实现类根本就不需要实现这个方法也被迫要写一个空实现，改动会非常大。</p><p>所以，接口默认方法就是为了解决这个问题，只要在一个接口添加了一个默认方法，所有的实现类就自动继承，不需要改动任何实现类，也不会影响业务，爽歪歪。</p><p>另外，<strong>接口默认方法可以被接口实现类重写</strong></p><h1 id="为什么要有接口静态方法" tabindex="-1"><a class="header-anchor" href="#为什么要有接口静态方法"><span>为什么要有接口静态方法？</span></a></h1><p>接口静态方法和默认方法类似，只是接口静态方法不可以被接口实现类重写</p><p>接口静态方法只可以直接通过静态方法所在的 接口名.静态方法名 来调用</p><h1 id="接口默认方法多继承冲突问题" tabindex="-1"><a class="header-anchor" href="#接口默认方法多继承冲突问题"><span>接口默认方法多继承冲突问题</span></a></h1><p>因为接口默认方法可以被继承并重写，如果继承的多个接口都存在相同的默认方法，那就存在冲突问题。 <strong>默认方法优先于抽象方法</strong></p>`,18),p=[i];function c(o,d){return e(),n("div",null,p)}const u=a(s,[["render",c],["__file","接口中新增的方法.html.vue"]]),m=JSON.parse('{"path":"/guide/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E6%96%B9%E6%B3%95.html","title":"接口中新增的方法","lang":"zh-CN","frontmatter":{"order":3,"title":"接口中新增的方法","description":"Java 8 开始是可以有方法实现的，可以在接口中添加默认方法和静态方法。 默认方法用 default 修饰，只能用在接口中，静态方法用 static 修饰 JDK8中接口的新增 在JDK8中针对接口有做增强，在JDK8之前 JDK8之后 为什么要有接口默认方法？ 举一个很现实的例子： 我们的接口老早就写好了，后面因为各种业务问题，避免不了要修改接口。...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"接口中新增的方法"}],["meta",{"property":"og:description","content":"Java 8 开始是可以有方法实现的，可以在接口中添加默认方法和静态方法。 默认方法用 default 修饰，只能用在接口中，静态方法用 static 修饰 JDK8中接口的新增 在JDK8中针对接口有做增强，在JDK8之前 JDK8之后 为什么要有接口默认方法？ 举一个很现实的例子： 我们的接口老早就写好了，后面因为各种业务问题，避免不了要修改接口。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"cylin"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口中新增的方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"cylin\\",\\"url\\":\\"https://docs.cylin.cn\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.61,"words":483},"filePathRelative":"guide/JDK8新特性/接口中新增的方法.md","autoDesc":true}');export{u as comp,m as data};
